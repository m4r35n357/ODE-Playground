#!/bin/sh

# Copyright (c) 2018-2020, Ian Smith (m4r35n357)
# All rights reserved.
# For licencing see LICENCE file
#
#  ./cns-test both 1 ./tsm-lorenz-dbg 15 _ 16 .01 10000 -15.8 -17.48 35.64 10 28 8 3
# | gnuplot -p -e "plot '<cat' using 1:2 with lines"

fileA='/tmp/dataA'  # the "better" simulation, or data file
fileB='/tmp/dataB'  # the original simulation

method=$1
threshold=$2
shift 2
original=$*

quarterstep () {
    start="$1 $2 $3 $4"
    step=$(echo "scale=6; $5 / 4;" | bc)
    steps=$(echo "scale=0; $6 * 4;" | bc)
    shift 6
    end="$*"
    echo 'Better:' $start $step $steps $end >&2
    $start $step $steps $end | sed -n '1~4p' >$fileA &
}

orderplus2 () {
    start="$1 $2 $3"
    order=$(expr $4 + 2)
    shift 4
    end="$*"
    echo 'Better:' $start $order $end >&2
    $start $order $end >$fileA &
}

orderstep () {
    start="$1 $2 $3"
    order=$(expr $4 + 1)
    step=$(echo "scale=6; $5 / 2;" | bc)
    steps=$(echo "scale=0; $6 * 2;" | bc)
    shift 6
    end="$*"
    echo 'Better:' $start $order $step $steps $end >&2
    $start $order $step $steps $end | sed -n '1~2p' >$fileA &
}

for n in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
do
    set $original
    begin="$1 $2 $3"
    shift 4
    finish="$*"
    current="$begin $n $finish"
    case $method in
         'step') quarterstep $current;;
        'order') orderplus2 $current;;
         'both') orderstep $current;;
              *) echo "CNS: Bad Method"; exit 1;;
    esac
    $current >$fileB & wait
    set $(./divergence.py $fileA $fileB 3 $threshold)
    echo $n $4
done 2>/dev/null
